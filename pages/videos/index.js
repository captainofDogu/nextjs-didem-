import Head from 'next/head'
import Link from 'next/link'
import { URL } from '../../enviroment'
export default function Videos({ videos }) {
  console.log(videos)
  return (
    <>
      <Head>
        <title>Videos</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {
        videos.map(video => (
          <Link href={`/videos/${video.id}`} >
            <a>{video.name}</a>
          </Link>
        ))
      }

  </>


    
    
  )
}
export const getStaticProps = async () => {
  const res = await fetch(`${URL}/api/videos`)
  const videos = await res.json()

  return {
    props:{
      videos:videos, // posts, şeklindede yazabiliriz 
    }
  } // return de bi obje döndürüyoruz içinde bi props olmak zorunda 
}

// getStaticProps static generation  ile veriyi yakalıyabileceğim bir method code'Un server-side çalışmasını sağlıyor databaseden veri yakalıyabilirim işte server-side code'u yazabilirim 
//getStaticProps sadece ve sadece Pages klosörü içindeki dosyalardan import edilebilir yani components dosyası altında herhangi bi dosyaya import edemeyiz 
// built in support => .css .sass ,scss CSS in JS(styled-jsx)

// 2 tane önemli veri çekme sistemi var birincisi static generation 2 cisi server-side Rendering sürekli farklı veri çekiyorsak 2 yazdıgımı kullanıyoruz 

// bazı özellikleri var orayı baştan kaçırdım ama buildTime da çalışıyor ve bütün istekler için tekrar tekrar oluşturuluyor ne zaman production ortamında devolopment ortamında ise  her user request'i için tekrar tekrar oluşturuluyor  bu içindeki code un  server-side da çalıştıgını garanti ediyor ve client-side da çalışmıyacagından emin olabilirsniz hatta bu code lar js bunddle bile dahil edilmiyor  tarayıcıyı gitmediğinden emin olabilirsinz 
// getStaticProps built time da çalışıyor ve production ortamında bütün istekler için tekrar tekrar kullanılıyor  ama development modunda ise her request için tekrar tekrar oluşturuluyor  ve bu code'un sadece server-side da çalıştıgını garanti ediyor  yani burada veritabanı işlemleri filesystem işlemleri yani server side code olarak ne varsa  doğrudan burda yazıp çalıştırır client-side da çalışmıyacagından emin olabiliriz yani bu codeların tarayıcıya gitmediğinden emin olabiliriz 



// console da fast refresh rebuilding ve fast refresh done yapıyor react componenet içinde bi refresh yapıyoruz ve fast refresh stati kaybetmeden yaptıgım değişikliği anında bana yansıtıyor 